(require 'package)


(setq backup-by-copying t)
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(setq inhibit-startup-screen t)
(global-linum-mode t)
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(setq line-number-mode t)
(setq column-number-mode t)
(load-theme 'noctilux t)
(set-face-attribute 'default nil :height 120)
(windmove-default-keybindings)
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'flex)
(add-to-list 'auto-mode-alist '("\\.jflex\\'" . flex-mode))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-source-correlate-mode t)
 '(nil nil t)
 '(package-selected-packages '(yasnippet pdf-tools go-mode haskell-mode auctex)))

(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))



(package-initialize)

(add-hook 'shell-mode-hook
  (lambda ()
    (define-key shell-mode-map (kbd "<M-up>") 'comint-previous-input)
    (define-key shell-mode-map (kbd "<M-down>") 'comint-next-input)
  )
)

;;(setq default-directory "C:/Users/turco/Documents" )

;;(setq preview-gs-command "C:/Program Files/gs/gs9.25/bin/gswin64c.exe")
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


;; sets up jflex-mode package in lisp dir
 (autoload 'jflex-mode "jflex-mode" nil t)
    (setq auto-mode-alist (cons '("\\(\\.flex\\|\\.jflex\\)\\'" . jflex-mode) auto-mode-alist))


;; to use pdfview with auctex
 (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
    TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
    TeX-source-correlate-start-server t) ;; not sure if last line is neccessary

 ;; to have the buffer refresh after compilation
 (add-hook 'TeX-after-compilation-finished-functions
	   #'TeX-revert-document-buffer)


;; PDF TOOLS CONFIG
(pdf-tools-install)
(add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
(add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
(setq pdf-view-midnight-colors '("#ffffff". "#202020"))
;;(TeX-source-correlate-mode)


(setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin/"))  
(setq exec-path (append exec-path '("/Library/TeX/texbin/")))

(setq pdf-view-use-scaling t
        pdf-view-use-imagemagick nil)


(with-temp-buffer
  (activate-input-method "jt-shorthand") ;; the input method has to be triggered for `quail-package-alist' to be non-nil
  (let ((quail-current-package (assoc "jt-shorthand" quail-package-alist)))
   (quail-define-rules ((append . t))
                       ("\\a" ?α)
      ("\\b" ?β)
      ("\\eps" ?ε)
      ("\\G" ?Γ)
      ("\\H" ?ℋ)
      ("\\N" ?ℕ)
;;       ("\\re" ?ℛ)
      ("\\F" ?ℱ)
      ("\\R" ?Ρ)
      ("\\vd" ?⊢)
      ("\\dv" ?⊣)
      ("\\bot" ?⊥)
      ("\\top" ?⊤)
      ("\\pi" ?π)
      ("\\sigma" ?σ)
      ("\\rho" ?ρ)
      ("\\chi" ?χ)
      ("\\ome" ?ω)
      ("\\O" ?Ω)
      ("\\Ov" ?Ω)
      ("\\Phi" ?Φ)
      ("\\Psi" ?Ψ)
      ("\\bar" ?̅)
      ("\\lam" ?λ)
      ("\\cdo" ?⋅)
      ("/\\" ?∧)
      ("\\/" ?∨)
      ("\\forall" ?∀)
      ("\\exists" ?∃)
      ("\\uplus" ?⊎)
      ("\\regto" ?↣)
      ("\\rto" ?↣)
      ("\\vto" ?⇝)
      ("->" ?→)
      ("\\to" ?→)
      ("\\mapsto" ?↦)
      ("\\To" ?⇒)
      ("<->" ?↔)
      ("\\~" ?¬)
      ("\\cap" ?∩)
      ("\\cup" ?∪)
      ("\\in" ?∈)
      ("\\nin" ?∉)
      ("\\cnt" ?∋)
      ("\\ncnt" ?∌)
      ("\\*" ?×)
      ("\\sub" ?⊂)
      ("\\subeq" ?⊆)
      ("\\sup" ?⊃)
      ("\\supeq" ?⊇)
      ("\\scup" ?⊔)
      ("\\scap" ?⊓)
      ("\\ssubeq" ?⊑)
      ("\\ssupeq" ?⊒)
      (">=" ?≥)
      ("<=" ?≤)
      ("\\ge" ?≥)
      ("\\le" ?≤)
      ("\\ne" ?≠)
      ("\\nexists" ?∄)
      ("<>" ?≠)
      ("\\pin" ?†)
      ("\\np" ?⋅)
      ("\\mp" ?∘)
      ("\\dd" ?‡)
      ("\\<<" ?⟪)
("\\>>" ?⟫)
      ("\\<" ?⟨)
("\\>" ?⟩)
      ("\\op" ?⊕)
      ("\\t" ?τ)
      ("\\fdo" ?⦙)
      ("\\tdo" ?⋮)
      ("_0" ?₀)
      ("_1" ?₁)
      ("_2" ?₂)
      ("_3" ?₃)
      ("_4" ?₄)
      ("_5" ?₅)
      ("_6" ?₆)
      ("_7" ?₇)
      ("_8" ?₈)
      ("_9" ?₉)
      ("\\_a" ?ₐ)
      ("\\_e" ?ₑ)
      ("\\_h" ?ₕ)
      ("\\_i" ?ᵢ)
      ("\\_j" ?ⱼ)
      ("\\_k" ?ₖ)
      ("\\_l" ?ₗ)
      ("\\_m" ?ₘ)
      ("\\_n" ?ₙ)
      ("\\_o" ?ₒ)
      ("\\_p" ?ₚ)
      ("\\_r" ?ᵣ)
      ("\\_s" ?ₛ)
      ("\\_t" ?ₜ)
      ("\\_u" ?ᵤ)
      ("\\_v" ?ᵥ)
      ("\\_x" ?ₓ)
      ("\\[" ?⟦)
      ("\\]" ?⟧)
      ("\\{" ?⦃)
      ("\\}" ?⦄)
      ("\\(|" ?⦇)
      ("\\|)" ?⦈)
      )))

(setq default-input-method "jt-shorthand")

(global-set-key (kbd "C-%") 'replace-regexp)

(let ((base03    "#002b36")
        (base02    "#073642")
        (base01    "#586e75")
        (base00    "#657b83")
        (base0     "#839496")
        (base1     "#93a1a1")
        (base2     "#eee8d5")
        (base3     "#fdf6e3")
        (yellow    "#b58900")
        (orange    "#cb4b16")
        (red       "#dc322f")
        (magenta   "#d33682")
        (violet    "#6c71c4")
        (blue      "#268bd2")
        (cyan      "#2aa198")
        (green     "#859900"))
    (custom-set-faces
     `(agda2-highlight-keyword-face ((t (:foreground ,orange))))
     `(agda2-highlight-string-face ((t (:foreground ,magenta))))
     `(agda2-highlight-number-face ((t (:foreground ,violet))))
     `(agda2-highlight-symbol-face ((((background ,base3)) (:foreground ,base01))))
     `(agda2-highlight-primitive-type-face ((t (:foreground ,blue))))
     `(agda2-highlight-bound-variable-face ((t nil)))
     `(agda2-highlight-inductive-constructor-face ((t (:foreground ,green))))
     `(agda2-highlight-coinductive-constructor-face ((t (:foreground ,yellow))))
     `(agda2-highlight-datatype-face ((t (:foreground ,blue))))
     `(agda2-highlight-field-face ((t (:foreground ,red))))
     `(agda2-highlight-function-face ((t (:foreground ,blue))))
     `(agda2-highlight-module-face ((t (:foreground ,violet))))
     `(agda2-highlight-postulate-face ((t (:foreground ,blue))))
     `(agda2-highlight-primitive-face ((t (:foreground ,blue))))
     `(agda2-highlight-record-face ((t (:foreground ,blue))))
     `(agda2-highlight-dotted-face ((t nil)))
     `(agda2-highlight-operator-face ((t nil)))
     `(agda2-highlight-error-face ((t (:foreground ,red :underline t))))
     `(agda2-highlight-unsolved-meta-face ((t (:background ,base03 :foreground ,yellow))))
     `(agda2-highlight-unsolved-constraint-face ((t (:background ,base03 :foreground ,yellow))))
     `(agda2-highlight-termination-problem-face ((t (:background ,orange :foreground ,base03))))
     `(agda2-highlight-incomplete-pattern-face ((t (:background ,orange :foreground ,base03))))
     `(agda2-highlight-typechecks-face ((t (:background ,cyan :foreground ,base03))))))
